<?php namespace spitfire\storage\database;

use spitfire\collection\Collection;

/**
 * The query table wraps a table and provides a consistent aliasing mechanism.
 * This allows the system to reference tables within the database system across
 * queries.
 * 
 * For example, when performing a query that requires a table to be joined twice,
 * the application needs to consistently alias the fields in the query. In SQL
 * we usually write something like
 * 
 * SELECT * FROM orders LEFT JOIN customers c1 ON (...) LEFT JOIN customers c2 ON (...)
 * 
 * And then reference the fields within them as c1.id or c2.id. Otherwise, the DBMS
 * will fail, indicating that the field `id` is ambiguous.
 */
class TableReference
{
	
	/**
	 * This table provides all the information (metadata and fields) about the table
	 * being queried.
	 * 
	 * @var string
	 */
	private $table;
	
	/**
	 * 
	 * @var Collection<string>
	 */
	private $fields;
	
	/**
	 * The following variables manage the aliasing system inside spitfire. To avoid
	 * having different tables with the same name in them, Spitfire uses aliases
	 * for the tables. These aliases are automatically generated by adding a unique
	 * number to the table's name.
	 * 
	 * The counter is in charge of making sure that every table is uniquely named,
	 * every time a new query table is created the current value is assigned and
	 * incremented.
	 *
	 * @var int
	 */
	private static $counter = 1;
	
	public function __construct(string $table, Collection $fields) 
	{
		#In case this table is aliased, the unique alias will be generated using this.
		$this->table = $table;
		$this->fields = $fields;
	}
	
	/**
	 * Creates a copy of this query table, generating a new ID in the process. This is
	 * due to the fact that these aliases are intended to be immutable.
	 * 
	 * @return TableReference
	 */
	public function withAlias() : TableReference
	{
		$id = self::$counter++;
		return new TableReference(sprintf('%s_%s', $this->table, $id), $this->fields);
	}
	
	/**
	 * Retrieves the table's alias. Please note that if the table is set to not alias,
	 * the system will return the table name. This quirk makes the method rather convenient
	 * to use.
	 * 
	 * @return string
	 */
	public function getName(): string
	{
		return $this->table;
	}
	
	/**
	 * 
	 * @return Collection<FieldReference>
	 */
	public function getOutputs(): Collection
	{
		return $this->fields->each(function (string $field) {
			return new FieldReference($this, $field);
		});
	}
	
	public function getOutput(string $name): FieldReference
	{
		assert($this->fields->contains($name));
		return new FieldReference($this, $name);
	}
	
}
