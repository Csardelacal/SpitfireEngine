<?php namespace spitfire\storage\database\identifiers;

/*
 *
 * Copyright (C) 2023-2023 CÃ©sar de la Cal Bretschneider <cesar@magic3w.com>.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-13 01  USA
 *
 */


use spitfire\collection\Collection;
use spitfire\storage\database\identifiers\FieldIdentifier;
use spitfire\storage\database\identifiers\IdentifierInterface;
use spitfire\storage\database\identifiers\TableIdentifierInterface;

/**
 * The query table wraps a table and provides a consistent aliasing mechanism.
 * This allows the system to reference tables within the database system across
 * queries.
 *
 * For example, when performing a query that requires a table to be joined twice,
 * the application needs to consistently alias the fields in the query. In SQL
 * we usually write something like
 *
 * SELECT * FROM orders LEFT JOIN customers c1 ON (...) LEFT JOIN customers c2 ON (...)
 *
 * And then reference the fields within them as c1.id or c2.id. Otherwise, the DBMS
 * will fail, indicating that the field `id` is ambiguous.
 */
class TableIdentifier implements TableIdentifierInterface
{
	
	/**
	 * This table provides all the information (metadata and fields) about the table
	 * being queried.
	 *
	 * @var string[]
	 */
	private $raw;
	
	/**
	 *
	 * @var Collection<string>
	 */
	private $fields;
	
	/**
	 * The following variables manage the aliasing system inside spitfire. To avoid
	 * having different tables with the same name in them, Spitfire uses aliases
	 * for the tables. These aliases are automatically generated by adding a unique
	 * number to the table's name.
	 *
	 * The counter is in charge of making sure that every table is uniquely named,
	 * every time a new query table is created the current value is assigned and
	 * incremented.
	 *
	 * @var int
	 */
	private static $counter = 1;
	
	/**
	 *
	 * @param string[] $table
	 * @param Collection<string> $fields
	 */
	public function __construct(array $table, Collection $fields)
	{
		assert(count($table) > 0 && count($table) < 3);
		
		#In case this table is aliased, the unique alias will be generated using this.
		$this->raw = $table;
		$this->fields = $fields;
	}
	
	/**
	 * Creates a copy of this query table, generating a new ID in the process. This is
	 * due to the fact that these aliases are intended to be immutable.
	 *
	 * @return TableIdentifierInterface
	 */
	public function withAlias() : TableIdentifierInterface
	{
		$id = self::$counter++;
		
		$raw = $this->raw;
		$last = sprintf('%s_%s', array_pop($raw), $id);
		array_push($raw, $last);
		
		return new TableIdentifier($raw, $this->fields);
	}
	
	/**
	 * Retrieves the table's alias. Please note that if the table is set to not alias,
	 * the system will return the table name. This quirk makes the method rather convenient
	 * to use.
	 *
	 * @return string
	 */
	public function getName(): string
	{
		$raw = $this->raw;
		$last = array_pop($raw);
		
		/**
		 * If a table identifier happens to be empty, the application has a severe malfunction
		 * somewhere.
		 */
		assert($last !== null);
		return $last;
	}
	
	/**
	 *
	 * @return Collection<FieldIdentifierInterface>
	 */
	public function getOutputs(): Collection
	{
		/**
		 * @var Collection<FieldIdentifierInterface>
		 */
		$t = $this->fields->each(function (string $field) : FieldIdentifierInterface {
			return new FieldIdentifier(array_merge($this->raw, [$field]));
		});
		
		return $t;
	}
	
	public function getOutput(string $name): FieldIdentifier
	{
		assert($this->fields->contains($name), "Table {$this->getName()} does not contain {$name}");
		return new FieldIdentifier(array_merge($this->raw, [$name]));
	}
	
	public function raw(): array
	{
		return $this->raw;
	}
}
