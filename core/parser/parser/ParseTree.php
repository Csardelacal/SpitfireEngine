<?php namespace spitfire\core\parser\parser;

use spitfire\core\parser\Scope;
use function collect;
use function console;

/* 
 * The MIT License
 *
 * Copyright 2019 César de la Cal Bretschneider <cesar@magic3w.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * The parse tree is a class that creates a link between a block and the result
 * it produces.
 * 
 * When defining a block, you also provide an optional callable to the does() method,
 * which allows the application to (in combination with scopes) make modifications
 * to the scope and generate a result.
 * 
 * In essence, the parse tree is the result from the parsing and will allow you
 * to "execute" the parsed expression.
 * 
 * @author César de la Cal Bretschneider <cesar@magic3w.com>
 */
class ParseTree
{
	
	/**
	 * The block that this parse tree was generated by.
	 *
	 * @var Block
	 */
	private $block;
	
	/**
	 * Contains the result of the block parsing the token buffer. This will contain
	 * lexemes from the scanner.
	 *
	 * @var mixed[]
	 */
	private $leafs = [];
	
	/**
	 * Creates a new parse tree.
	 * 
	 * @param Block $block
	 * @param type $nodes
	 */
	public function __construct(Block$block, $nodes) {
		$this->block = $block;
		$this->leafs = $nodes;
	}
	
	public function getBlock() {
		return $this->block;
	}
	
	public function getLeafs() {
		return $this->leafs;
	}
	
	public function setBlock($block) {
		$this->block = $block;
		return $this;
	}
	
	public function setLeafs($nodes) {
		$this->leafs = $nodes;
		return $this;
	}
	
	/**
	 * Allows the user to "execute" the parse tree. This method returns whatever
	 * the block's does() method returns.
	 * 
	 * @param Scope $context
	 * @return mixed
	 */
	public function resolve(Scope$context) {
		return $this->block->operate($this, $context);
	}
	
	public function stringify($offset = 0) {
		$leafs = collect($this->leafs);
		
		return str_repeat(' ', $offset) . sprintf('branch(%s - %s - %s)%s%s', count($this->leafs), $this->block->name, get_class($this->block), PHP_EOL, $leafs->each(function ($e) use ($offset) { 
			return $e instanceof ParseTree? $e->stringify($offset + 4) : str_repeat(' ', $offset + 4) . $e;
		})->join(PHP_EOL));
	}
	
	public function __toString() {
		return $this->stringify();
	}
	
}
